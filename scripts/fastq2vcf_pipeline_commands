#! /usr/bin/env python3

from configparser import ConfigParser
from configparser import ExtendedInterpolation
from dataclasses import dataclass
from os.path import dirname
from pathlib import Path
from subprocess import run
from time import perf_counter_ns
from typing import Optional
# Required for type hinting prior to Python 3.9
from typing import Dict
from typing import List

import re
import shutil
import sys


###########################################################################
# --  Configuration - file sections and keys
###########################################################################

# Global parameters
GLOBAL_SECTION = "Global"
CREATE_OUTPUT_DIRS = "create_output_dirs"
CLEAR_OUTPUT_DIRS = "clear_output_dirs"

# Processing steps
PROCESSING_STEPS_SECTION = "ProcessingSteps"
BWA_MEM2_INDEX_REFERENCE_FASTA = "bwa_mem2_index_reference_fasta"
FASTQC = "fastqc"
REPAIR_FASTQ = "repair_fastq"
FASTP = "fastp"
MAPPING_BWA = "mapping_bwa"
QUALIMAP_BAMQC = "qualimap_bamqc"
QUALIMAP_MULTI_BAMQC = "qualimap_multi_bamqc"

# Directory and file paths
FILE_PATHS_SECTION = "FilePaths"
REFERENCE_FASTA_FILE = "reference_fasta_file"
FASTQ_DIR = "fastq_dir"
FASTQC_DIR = "fastqc_dir"
REPAIR_DIR = "repair_dir"
FASTP_DIR = "fastp_dir"
MAPPING_BWA_DIR = "mapping_bwa_dir"
MAPPING_QC_DIR = "mapping_qc_dir"
INPUT_GROUPS_FILE = "input_groups_file"


###########################################################################
# --  Configuration - parameters
###########################################################################

def read_config() -> ConfigParser:
    # The config file is either provided as the first script parameter,
    # or it is the file fastq2vcf_pipeline_commands.ini within the script
    # directory
    if len(sys.argv) > 1:
        config_path = sys.argv[1]
    else:
        script_dir = Path(dirname(Path(sys.argv[0]).resolve()))
        config_path = script_dir / "fastq2vcf_pipeline_commands.ini"
    # -- Read the config file
    config = ConfigParser(interpolation=ExtendedInterpolation())
    config.read(config_path)
    return config


CONFIG: ConfigParser = read_config()


def process_step(config_key: str) -> bool:
    return CONFIG.getboolean(PROCESSING_STEPS_SECTION, config_key, fallback=False)


def file_path(config_key: str) -> Optional[Path]:
    p = CONFIG.get(FILE_PATHS_SECTION, config_key, fallback=None)
    if p:
        p = Path(p)
    return p


###########################################################################
# --  List of the raw FASTQ input files
###########################################################################

# List of the raw FASTQ input files
# Use the get_fastq_file_names() for accessing this list.
fastq_file_names: Optional[List[str]] = None


def get_fastq_file_names() -> List[str]:
    global fastq_file_names
    if not fastq_file_names:
        fastq_file_names = [fastq1.name for fastq1 in sorted(file_path(FASTQ_DIR).glob("*_1.fastq*"))]
    return fastq_file_names


###########################################################################
# --  Dictionary of the input and output file paths
###########################################################################

@dataclass
class IOFilePaths:
    raw1: Optional[Path] = None
    raw2: Optional[Path] = None
    fixed1: Optional[Path] = None
    fixed2: Optional[Path] = None
    fixedsingleton: Optional[Path] = None
    trim1: Optional[Path] = None
    trim2: Optional[Path] = None
    trim_report: Optional[Path] = None
    trim_log: Optional[Path] = None
    sam: Optional[Path] = None
    bam: Optional[Path] = None
    sorted_bam: Optional[Path] = None
    mapping_qc_outdir: Optional[Path] = None


iofilepaths_dict: Dict[str, IOFilePaths] = {}


def iofilepaths(fastq1: str) -> IOFilePaths:
    iofilepaths = iofilepaths_dict.get(fastq1)
    if not iofilepaths:
        # Create a new dictionary entry for that FASTQ file
        fastq2 = fastq1.replace("_1.fastq", "_2.fastq")
        iofilepaths = IOFilePaths()
        if file_path(FASTQ_DIR):
            iofilepaths.raw1 = file_path(FASTQ_DIR) / fastq1
            iofilepaths.raw2 = file_path(FASTQ_DIR) / fastq2
        if file_path(REPAIR_DIR):
            iofilepaths.fixed1 = file_path(REPAIR_DIR) / fastq1.replace("_1.fastq", "_fixed_1.fastq")
            iofilepaths.fixed2 = file_path(REPAIR_DIR) / fastq2.replace("_2.fastq", "_fixed_2.fastq")
            iofilepaths.fixedsingleton = file_path(REPAIR_DIR) / fastq1.replace("_1.fastq", "_singletons.fastq")
        if file_path(FASTP_DIR):
            iofilepaths.trim1 = file_path(FASTP_DIR) / fastq1.replace("_1.fastq", "_trim_1.fastq")
            iofilepaths.trim2 = file_path(FASTP_DIR) / fastq2.replace("_2.fastq", "_trim_2.fastq")
            iofilepaths.trim_report = file_path(FASTP_DIR) / re.sub("_1.fastq.*", "_trim_report.html", fastq1)
            iofilepaths.trim_log = file_path(FASTP_DIR) / re.sub("_1.fastq.*", "_trim.log", fastq1)
        if file_path(MAPPING_BWA_DIR):
            iofilepaths.sam = file_path(MAPPING_BWA_DIR) / re.sub("_1.fastq.*", ".sam", fastq1)
            iofilepaths.bam = file_path(MAPPING_BWA_DIR) / re.sub("_1.fastq.*", ".bam", fastq1)
            iofilepaths.sorted_bam = file_path(MAPPING_BWA_DIR) / re.sub("_1.fastq.*", "_sorted.bam", fastq1)
        if file_path(MAPPING_QC_DIR):
            iofilepaths.mapping_qc_outdir = file_path(MAPPING_QC_DIR) / fastq1.replace("_1.fastq.gz", "")
    return iofilepaths


###########################################################################
# --  Initial preparation of the output directories
###########################################################################

def check_and_prepare_output_dir(output_dir: Path) -> None:
    # Create the directory if it does not already exist (only if configured)
    if not output_dir.is_dir():
        if CONFIG.getboolean(GLOBAL_SECTION, CREATE_OUTPUT_DIRS, fallback=False):
            output_dir.mkdir()
        else:
            raise SystemExit(f"Error: Required directory {output_dir} does not exist.")
    # Clear the directory if not empty (only if configured)
    if CONFIG.getboolean(GLOBAL_SECTION, CLEAR_OUTPUT_DIRS, fallback=False) and any(output_dir.iterdir()):
        shutil.rmtree(output_dir)
        output_dir.mkdir()


def check_and_prepare_output_dirs() -> None:
    if process_step(FASTQC):
        check_and_prepare_output_dir(file_path(FASTQC_DIR))
    if process_step(REPAIR_FASTQ):
        check_and_prepare_output_dir(file_path(REPAIR_DIR))
    if process_step(FASTP):
        check_and_prepare_output_dir(file_path(FASTP_DIR))
    if process_step(MAPPING_BWA):
        check_and_prepare_output_dir(file_path(MAPPING_BWA_DIR))
    if process_step(QUALIMAP_BAMQC):
        check_and_prepare_output_dir(file_path(MAPPING_QC_DIR))


###########################################################################
# --  Data processing functions
###########################################################################

def bwa_mem2_index_reference_fasta() -> None:
    run(["bwa-mem2", "index", file_path(REFERENCE_FASTA_FILE)])


def fastqc(fastq1: str) -> None:
    run([
        "fastqc",
        "--threads", "8",
        "-o", file_path(FASTQC_DIR),
        iofilepaths(fastq1).raw1,
        iofilepaths(fastq1).raw2])


def repair_fastq(fastq1: str) -> None:
    run([
        "repair.sh",
        "overwrite=true",
        "in1=" + str(iofilepaths(fastq1).raw1),
        "in2=" + str(iofilepaths(fastq1).raw2),
        "out1=" + str(iofilepaths(fastq1).fixed1),
        "out2=" + str(iofilepaths(fastq1).fixed2),
        "outsingle=" + str(iofilepaths(fastq1).fixedsingleton)])


def fastp(fastq1: str) -> None:
    run([
        "fastp",
        "--thread", "8",
        "--in1", iofilepaths(fastq1).fixed1,
        "--in2", iofilepaths(fastq1).fixed2,
        "--out1", iofilepaths(fastq1).trim1,
        "--out2", iofilepaths(fastq1).trim2,
        "--length_required", "50",
        "--html", iofilepaths(fastq1).trim_report],
        stderr=iofilepaths(fastq1).trim_log.open("w"))


def map_bwa(fastq1: str) -> None:
    # Map the trimmed FASTQ files to the reference FASTA file
    run([
        "bwa-mem2", "mem", "-M",
        "-t", "8",
        file_path(REFERENCE_FASTA_FILE),
        iofilepaths(fastq1).trim1,
        iofilepaths(fastq1).trim2],
        stdout=iofilepaths(fastq1).sam.open("w"))
    # Convert the SAM file into BAM format
    run([
        "samtools", "view", "--bam", "-S",
        "--threads", "8",
        iofilepaths(fastq1).sam],
        stdout=iofilepaths(fastq1).bam.open("w"))
    # Sort the BAM file
    run([
        "samtools", "sort",
        "--threads", "8",
        "-o", iofilepaths(fastq1).sorted_bam,
        iofilepaths(fastq1).bam])
    # Index the sorted BAM file
    run([
        "samtools", "index",
        "--threads", "8",
        iofilepaths(fastq1).sorted_bam])
    # Delete the unsorted BAM and SAM files
    iofilepaths(fastq1).sam.unlink()
    iofilepaths(fastq1).bam.unlink()


def qualimap_bamqc(fastq1: str) -> None:
    run([
        "qualimap", "bamqc",
        "-nt", "8",
        "-bam", iofilepaths(fastq1).sorted_bam,
        "-outdir", iofilepaths(fastq1).mapping_qc_outdir])


def qualimap_multi_bamqc() -> None:
    if not file_path(INPUT_GROUPS_FILE):
        raise SystemExit("Error: input_groups_file not configured.")
    if not file_path(INPUT_GROUPS_FILE).is_file():
        raise SystemExit(f"Error: Required input groups file {file_path(INPUT_GROUPS_FILE)} does not exist.")
    qualimap_data_file_path = file_path(MAPPING_QC_DIR) / "input_groups.txt"
    if not qualimap_data_file_path.is_file() or not file_path(INPUT_GROUPS_FILE).samefile(qualimap_data_file_path):
        shutil.copy(file_path(INPUT_GROUPS_FILE), qualimap_data_file_path)
    run([
        "qualimap", "multi-bamqc",
        "-d", qualimap_data_file_path,
        "-outdir", file_path(MAPPING_QC_DIR) / "multibamqc",
        "-outformat", "PDF",
        "-outfile", "Overview-Report.pdf"])


###########################################################################
# -- Main()
###########################################################################

def main() -> None:
    # Measure the elapsed time in nanoseconds - Start
    time_start = perf_counter_ns()

    ###########################################################################
    # -- Step 0 - Check and prepare all required output directories
    ###########################################################################

    # Create output directories if necessary and configured
    # Clear output directories if configured
    check_and_prepare_output_dirs()

    ###########################################################################
    # -- Step 1 - Index the FASTA reference file
    ###########################################################################

    if process_step(BWA_MEM2_INDEX_REFERENCE_FASTA):
        bwa_mem2_index_reference_fasta()

    ###########################################################################
    # -- Step 2 - Processing chain of the raw FASTQ input files
    # --          Loop over all raw FASTQ input files
    ###########################################################################

    for fastq1 in get_fastq_file_names():
        # Create fastqc quality reports of the raw FASTQ input files
        # -> fastqc
        if process_step(FASTQC):
            fastqc(fastq1)
        # Repair the raw FASTQ input files
        # -> repair.sh
        if process_step(REPAIR_FASTQ):
            repair_fastq(fastq1)
        # Perform quality trimming of the raw/repaired FASTQ reads
        # -> fastp
        if process_step(FASTP):
            fastp(fastq1)
        # Map the trimmed FASTQ files to the reference FASTA file
        # -> bwa-mem2 mem
        # Convert the SAM file into BAM format
        # -> samtools view
        # Sort the BAM file
        # -> samtools sort
        # Index the sorted BAM file
        # -> samtools index
        # Delete the unsorted BAM and SAM files
        if process_step(MAPPING_BWA):
            map_bwa(fastq1)
        # Create a mapping quality report
        # -> qualimap bamqc
        if process_step(QUALIMAP_BAMQC):
            qualimap_bamqc(fastq1)

    ###########################################################################
    # -- Step 3 - Create an overview mapping quality report for all processed
    # --          FASTQ files
    ###########################################################################

    if process_step(QUALIMAP_MULTI_BAMQC):
        qualimap_multi_bamqc()

    ###########################################################################
    # -- Elapsed time in nanoseconds
    ###########################################################################

    time_end = perf_counter_ns()
    time_elapsed_ms = (time_end - time_start) / 1_000_000
    print(f"Execution time in ms: {time_elapsed_ms}.")


if __name__ == "__main__":
    main()
